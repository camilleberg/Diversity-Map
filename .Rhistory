filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ", ", female)
# NOTE: the comma here should match the comma later as a separator
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
# grouping and combining all the labels to the distinct groups
census_groups <- categories %>%
group_by(var_names) %>%
mutate(labels = paste0(census_label, collapse = ", ")) %>%
distinct(labels)
View(census_groups)
lang_vars <- VARS %>%
filter(concept == "LANGUAGE SPOKEN AT HOME FOR THE POPULATION 5 YEARS AND OVER") %>%
filter(str_detect(label, '\"', negate = T)) %>%
mutate(nameE = paste0(name, "E"))
#the variable codes to use as input for get_acs
lang_names <- lang_vars$name
#Call to census api to get relevant variables
#language_at_home_acs5
lang_pull_raw <- tidycensus::get_acs(geography = "tract",
variable = lang_names,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
View(lang_pull_raw)
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = unique(categories$census_label),
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
unique(categories$census_label)
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = unique(categories$census_label)[1],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
strplit(unique(categories$census_label), ",")
?strplit
?strsplit
strsplit(unique(categories$census_label), ",")
acs_pull_labels <- unlist(strsplit(unique(categories$census_label), ","))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[45],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
View(lang_pull_raw)
lang_vars$name
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
library(tidycensus)
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[1:10],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# unlisting variable names
acs_pull_labels <- na.omit(unlist(strsplit(unique(categories$census_label), ",")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[11:20],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[21:30],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[31:40],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[31],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[32],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[33],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[34],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[34]
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35:40],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[36], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[37], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[40], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[2], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[50], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[50]
for(i in 1:nrow(categories)){
# selecting only the table of interest
table <- VARS %>%
filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ",", female)
# NOTE: the comma here should match the comma later as a separator
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
# grouping and combining all the labels to the distinct groups
census_groups <- categories %>%
group_by(var_names) %>%
mutate(labels = paste0(census_label, collapse = ", ")) %>%
distinct(labels)
# unlisting variable names
acs_pull_labels <- na.omit(unlist(strsplit(unique(categories$census_label), ",")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[50], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[43], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35:40], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[34], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[36], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[37], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[37]
acs_pull_labels[!acs_pull_labels == "NA"]
acs_pull_labels <- acs_pull_labels[!acs_pull_labels == "NA"]
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
other_var_raw <- tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
View(other_var_raw)
#Removing margin of error columns
other_var_small <- other_var_raw %>%
select(!ends_with("M"))
lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
ang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
abel_small[1]<- "Total"
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
dat$label_small[1]<- "Total"
lang_pull_small <- lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small <- lang_pull_raw %>%
select(!ends_with("M"))
##Formatting data
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
dat$label_small[1]<- "Total"
lang_pull_small <- lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE)
