df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
mutate(calc = across(div_prop(!ends_with("Total"), ends_with("Total"))))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
# mutate(calc = across(div_prop(!ends_with("Total"), ends_with("Total"))))
mutate(calc = div_prop(across(!ends_with("Total")), across(ends_with("Total"))))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
mutate(calc = div_prop(!ends_with("Total"), ends_with("Total")))
?enquo
total <- df_pob %>%
select(ends_with("Total"))
df_pob %>%
select(contains("nat_for")) %>%
mutate(calc = div_prop(across(), total))
div_prop() <- div_prop(total_pop = total)
apply(df_educ, 1, sum)
apply(df_educ[!1:3], 1, sum)
apply(df_educ[!1:3], 2, sum)
apply(df_educ[!(1:3)], 2, sum)
df_educ[!(1:3)]
View(df_educ)
df_educ <- other_var_groups %>%
select(c(GEOID, NAME, geometry, starts_with("educ")))
df_pob <- other_var_groups %>%
select(c(GEOID, NAME, geometry, starts_with("pob")))
apply(df_educ[!(1:3)], 2, sum)
df_educ[!(1:3)]
View(df_educ)
df_educ[!1:3]
df_educ[1:3]
apply(df_educ[4:6], 2, sum)
?rowwise
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rowwise()
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rowwise() %>%
mutate(calc = max())
)
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rowwise() %>%
mutate(calc = sum)
?c_across
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
mutate(Total = ends_with("Total"))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total")))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
mutate(calc = div_prop(c_across(!total), total)
)
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
rowwise() %>%
mutate(calc = div_prop(c_across(!total), total))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
rowwise() %>%
mutate(c(calc.1, calc.2) = div_prop(c_across(!total), total))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
across(!total, sum)
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
mutate(calc = across(!total, sum))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
mutate(calc = across(!total, n))
df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total")) %>%
mutate(calc = across(!total, max))
slice <- df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
slice <- df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)+i] <- paste0(colnames(slice)[i], "_calc")
}
i <- 1
cbind(slice, div_prop(slice[, i], slice$total))
slice <- df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
cbind(slice, div_prop(slice[, i], slice$total))
ncol(slice)
colnames(slice)[ncol(slice)+i]
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)+i]
ncol(slice)
ncol(slice)+i
rm(i)
slice <- df_pob %>%
select(c(contains("nat_for"), ends_with("Total"))) %>%
rename(total = ends_with("Total"))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
View(slice)
slice <- df_pob %>%
rename(total = ends_with("Total"))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
df_pob %>%
rename(total = ends_with("Total")) %>%
select(!C(GEOID, NAME, geometry))
df_pob %>%
rename(total = ends_with("Total")) %>%
select(!c(GEOID, NAME, geometry))
slice <- df_pob %>%
rename(total = ends_with("Total")) %>%
select(!c(GEOID, NAME, geometry))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
View(slice)
slice %>% t() %>% tibble()
c <- slice %>% t() %>% tibble()
View(c)
View(categories)
categories["var_names"]
categories[c("var_names", "group_labels")]
c <- slice %>% t() %>% tibble() %>% rownames_to_column()
View(c)
slice %>% t() %>% tibble() %>% rownames_to_column("VALUE")
rownames(c)
slice <- df_pob %>%
rename(total = ends_with("Total")) %>%
select(!c(GEOID, NAME, geometry))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
c <- slice %>% t() %>% tibble() %>% rownames_to_column("var_names")
c <- slice %>% t() %>% tibble()
slice %>% t()
slice %>% t() %>% as_tibble()
slice %>% t() %>% tibble()
slice %>% t() %>% as_tibble() %>% row.names()
slice %>% t() %>% as_tibble() %>% row.names(colnames(slice))
slice %>% t() %>% as_tibble() %>% rbind(colnames(slice))
slice %>% t() %>% as_tibble() %>% cbind(colnames(slice))
slice %>% t() %>% as_tibble() %>% mutate(var_names = colnames(slice))
slice %>% t() %>% as_tibble() %>%
mutate(var_names = colnames(slice)) %>%
right_join(categories[c("var_names", "group_labels")], by = "var_names")
c<- slice %>% t() %>% as_tibble() %>%
mutate(var_names = colnames(slice)) %>%
right_join(categories[c("var_names", "group_labels")], by = "var_names")
View(c)
c<- slice %>% t() %>% as_tibble() %>%
mutate(var_names = colnames(slice)) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
slice %>% t() %>% as_tibble() %>%
mutate(var_names = colnames(slice))
c<- slice %>% t() %>% as_tibble() %>%
mutate(var_names = colnames(slice))
slice <- df_pob %>%
rename(total = ends_with("Total")) %>%
select(!c(GEOID, NAME, geometry))
for(i in 1:(ncol(slice)-1)) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble()
slice %>% select(ends_with("calc"))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = colnames(slice)) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble()
colnames(slice)[ends_with("calc")]
# variable names
grepl("calc$", colnames(slice))
# variable names
colnames(grepl("calc$", colnames(slice)))
# variable names
colnames(slice)[grepl("calc$", colnames(slice))]
# variable names
colnames(slice)[!grepl("calc$", colnames(slice))]
# variable names
var_names <- colnames(slice)[!grepl("calc$", colnames(slice))]
# variable names
group_var_names <- colnames(slice)[!grepl("calc$", colnames(slice))]
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble()
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble()
View(c)
View(slice)
slice <- df_pob %>%
rename(total = ends_with("Total")) %>%
select(!c(GEOID, NAME, geometry))
for(i in 1:(ncol(slice))) {
slice <- cbind(slice, div_prop(slice[, i], slice$total))
colnames(slice)[ncol(slice)] <- paste0(colnames(slice)[i], "_calc")
}
# variable names
group_var_names <- colnames(slice)[!grepl("calc$", colnames(slice))]
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
View(c)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names)
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names)
View(c)
View(c)
rm(c)
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names)
View(c)
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(div_sum = sum)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(n = sum())
unique(c$group_labels)
which(is.na(c$group_labels))
View(categories)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(n = max())
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(n = n())
typeof(c$V2)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(n = sum(across()))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(sum))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(, list=(sum)))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(, list=(sum = sum)))
c<- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(, list=(sum = sum)))
View(c)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(sum = sum)))
mtcars %>%
group_by(cyl) %>%
summarise(across(everything(), sum))
mtcars
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(sum = sum)))
View(c)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(sum = sum(na.rm = T))))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels)
mtcars
mtcars %>%
group_by(cyl) %>%
summarise(across(everything(), sum))
c<- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(sum)))
View(c)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(sum)))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
group_by(group_labels) %>%
summarise(across(everything(), list=(n())))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
dplyr::group_by(group_labels) %>%
dplyr::summarise(across(everything(), list=(n())))
dplyr::summarise(across(everything(), list=(sum))
)
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
dplyr::group_by(group_labels) %>%
dplyr::summarise(sum = sum())
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
dplyr::group_by(group_labels) %>%
dplyr::summarise(across(everything(), sum))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
dplyr::group_by(group_labels) %>%
dplyr::summarise(across(everything(), list = sum))
slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names") %>%
dplyr::group_by(group_labels) %>%
dplyr::summarise(across(everything(), list = sum), .groups = 'drop')
c <- slice %>% select(ends_with("calc")) %>%
t() %>% as_tibble() %>%
mutate(var_names = group_var_names) %>%
left_join(categories[c("var_names", "group_labels")], by = "var_names")
c$group_labels
# loading libraries
remotes::install_github("walkerke/tidycensus")
## PULLING AND ORGANZIING THE DATA -----------------------------------------
VARS <- tidycensus::load_variables(dataset = 'acs5', year = 2020, cache = T)
# categories <- read_xlsx("Diversity Map Categories.xlsx")
categories <- read.csv("Diversity Map Categories.csv")
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
library(tidyr)
library(stringrr)
library(stringr)
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
categories$group_labels <- paste0(categories$title, "_", categories$group_name)
# initialing empty column to assign new var
categories$census_label <- NA
# looping through to fill with the relevant census var names
for(i in 1:nrow(categories)){
# selecting only the table of interest
table <- VARS %>%
filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
if(categories$var_name_ending[i] == "High school graduate (includes equivalency)") {
# manually fixing the high school thing
male <- "B15002_011"; female <- "B15002_028"
} else {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ",", female)
# NOTE: the comma here should match the comma later as a separator
}
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
library(dplyr)
library(tidycensus)
library(tidyverse)
library(leaflet)
library(leafpop)
library(mapview)
library(sf)
library(stringr)
library(plotly)
library(readr)
library(readxl)
library(stringr)
library(dplyr)
library(stringr)
reating unique variable names
VARS <- tidycensus::load_variables(dataset = 'acs5', year = 2020, cache = T)
# categories <- read_xlsx("Diversity Map Categories.xlsx")
categories <- read.csv("Diversity Map Categories.csv")
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
categories$group_labels <- paste0(categories$title, "_", categories$group_name)
# initialing empty column to assign new var
categories$census_label <- NA
# looping through to fill with the relevant census var names
for(i in 1:nrow(categories)){
# selecting only the table of interest
table <- VARS %>%
filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
if(categories$var_name_ending[i] == "High school graduate (includes equivalency)") {
# manually fixing the high school thing
male <- "B15002_011"; female <- "B15002_028"
} else {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ",", female)
# NOTE: the comma here should match the comma later as a separator
}
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
# grouping and combining all the labels to the distinct groups
census_groups <- categories %>%
group_by(var_names) %>%
mutate(labels = paste0(census_label, collapse = ",")) %>%
distinct(labels)
# un-listing variable names
acs_pull_labels <- unlist(strsplit(unique(categories$census_label), ","))
acs_pull_labels <- acs_pull_labels[!acs_pull_labels == "NA"]
# fix NA issue later (this is related to the High School thing)
# pulling census data
other_var_raw <- tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
