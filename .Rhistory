show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[21:30],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[31:40],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[31],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[32],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[33],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[34],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[34]
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35:40],
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[36], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[37], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[40], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[2], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[50], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[50]
for(i in 1:nrow(categories)){
# selecting only the table of interest
table <- VARS %>%
filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ",", female)
# NOTE: the comma here should match the comma later as a separator
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
# grouping and combining all the labels to the distinct groups
census_groups <- categories %>%
group_by(var_names) %>%
mutate(labels = paste0(census_label, collapse = ", ")) %>%
distinct(labels)
# unlisting variable names
acs_pull_labels <- na.omit(unlist(strsplit(unique(categories$census_label), ",")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[50], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[43], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35:40], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[34], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[35], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[36], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels[37], #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
acs_pull_labels[37]
acs_pull_labels[!acs_pull_labels == "NA"]
acs_pull_labels <- acs_pull_labels[!acs_pull_labels == "NA"]
# pulling census data
tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
# pulling census data
other_var_raw <- tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
View(other_var_raw)
#Removing margin of error columns
other_var_small <- other_var_raw %>%
select(!ends_with("M"))
lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
ang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
abel_small[1]<- "Total"
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
dat$label_small[1]<- "Total"
lang_pull_small <- lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small <- lang_pull_raw %>%
select(!ends_with("M"))
##Formatting data
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
dat$label_small[1]<- "Total"
lang_pull_small <- lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE)
st updated:
# libraries and setup
rm(list = ls())
remotes::install_github("walkerke/tidycensus")
###FIRST SET WD TO SOURCE FILE LOCATION
# Loading in constants and functions ---------------------------------------
VARS <- tidycensus::load_variables(dataset = 'acs5', year = 2020, cache = T)
div_prop <- function(var, total_pop) {
x <- (var/total_pop)^2
return(x)
}
d.R
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
# to help
# make sure to run up to line 26 in either
# setup_other_vars.R or
# setup_cleaned.R
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
remotes::install_github("walkerke/tidycensus")
###FIRST SET WD TO SOURCE FILE LOCATION
# Loading in constants and functions ---------------------------------------
VARS <- tidycensus::load_variables(dataset = 'acs5', year = 2020, cache = T)
# reading in the csv
library(readxl)
categories <- read_xlsx("Diversity Map Categories.xlsx")
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
library(stringr)
library(dplyr)
# creating unique variable names
categories$var_names <- paste0(categories$title, "_", categories$group_name, "_",
str_replace_all(categories$var_description, " ", "_"))
initialing empty column to assign new var
categories$census_label <- NA
for(i in 1:nrow(categories)){
# selecting only the table of interest
table <- VARS %>%
filter(grepl(paste0("^", categories$table_name[i]), VARS$name)) %>%
select(label, name)
# selecting from the table of interest
if(categories$title[i] == "educ") {
# aggregating the male and female var names because they're segregated for educ
male <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][1]
female <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)][2]
# assigning new label
categories$census_label[i] <- paste0(male, ",", female)
# NOTE: the comma here should match the comma later as a separator
} else {
# assigning new label
categories$census_label[i] <- table$name[grepl(paste0(categories$var_name_ending[i], "$"), table$label)]
}
}
# grouping and combining all the labels to the distinct groups
census_groups <- categories %>%
group_by(var_names) %>%
mutate(labels = paste0(census_label, collapse = ", ")) %>%
distinct(labels)
# unlisting variable names
acs_pull_labels <- unlist(strsplit(unique(categories$census_label), ","))
acs_pull_labels <- acs_pull_labels[!acs_pull_labels == "NA"]
# fix NA issue later
# pulling census data
other_var_raw <- tidycensus::get_acs(geography = "tract",
variable = acs_pull_labels, #34,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
#Removing margin of error columns
other_var_small <- other_var_raw %>%
select(!ends_with("M"))
##Formatting data
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
View(other_var_small)
View(census_groups)
View(categories)
starts_with(categories$var_names, "all")
startsWith(categories$var_names, "all"
)
categories$var_names
startsWith(categories$var_names, "pob")
categories$census_label[startsWith(categories$var_names, "pob")]
starts_with(categories$census_label[startsWith(categories$var_names, "pob")])
other_var_small %>%
starts_with(categories$census_label[startsWith(categories$var_names, "pob")])
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob")]))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")]))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
mutate(across(~.x))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
mutate(across(sum()))
?across
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
mutate(across(~.x + n))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
mutate(across(B05002_002E:B05002_013E, ~.x + n))
typeof(other_var_small$B05002_002E)
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(n = sum())
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(sum)
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(sum())
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, sum))
sum(other_var_raw$B05002_002E)
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, div_prop()))
# from setup, cleaned
div_prop <- function(var, total_pop) {
x <- (var/total_pop)^2
return(x)
}
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, div_prop()))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, div_prop(.x, 56)))
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, div_prop(~, 56)))
summarise(across(!geometry, sum)
)
other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")])) %>%
summarise(across(!geometry, sum))
x <- other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")]))
apply(x, 2, sum)
?aapply
?apply
apply(x = x, margin = 2, sum)
apply(x = x, margin = 2, FUM = sum)
apply(x = x, margin = 2, FUN = sum)
dat <- other_var_small %>%
select(starts_with(categories$census_label[startsWith(categories$var_names, "pob_nat_for")]))
apply(x = dat, margin = 2, FUN = sum)
apply(x = dat, margin = 1, FUN = sum)
lapply(dat, sum)
View(census_groups)
View(other_var_small)
