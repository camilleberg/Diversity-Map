rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate_if(is.numeric,scales::percent)
table_popup_fxn <- function(tract_df, input) {
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate_if(is.numeric,scales::percent)
# renaming columns per variable
if(str_contains(input, "hh")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Households")
} else if(str_contains(input, "educ")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 25+")
}else if(str_contains(input, "lang")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 5+")
} else {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons")
}
return(table_df)
}
tract_df %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addProviderTiles(provider = "CartoDB.Positron")  %>%
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data), group = 'current_data',
popup = popupTable(table_popup_fxn(tract_df, input))
) %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data,
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
tract_df %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addProviderTiles(provider = "CartoDB.Positron")  %>%
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data), group = 'current_data',
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)
) %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data,
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent)
table_popup_fxn <- function(tract_df, input) {
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent)
# renaming columns per variable
if(str_contains(input, "hh")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Households")
} else if(str_contains(input, "educ")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 25+")
}else if(str_contains(input, "lang")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 5+")
} else {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons")
}
return(table_df)
}
tract_df %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addProviderTiles(provider = "CartoDB.Positron")  %>%
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data), group = 'current_data',
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)
) %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data,
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent(x = ., digits = 2))
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent, digits = 2)
View(table_df)
table_popup_fxn <- function(tract_df, input) {
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent(.x, digits = 2) )
# renaming columns per variable
if(str_contains(input, "hh")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Households")
} else if(str_contains(input, "educ")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 25+")
}else if(str_contains(input, "lang")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 5+")
} else {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons")
}
return(table_df)
}
tract_df %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addProviderTiles(provider = "CartoDB.Positron")  %>%
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data), group = 'current_data',
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)
) %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data,
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
runApp('mapnew 2')
runApp('mapnew 2')
View(pal)
runApp('mapnew')
runApp('mapnew')
{
tract_df <- tract_df %>% st_as_sf()
selected_val <- str_sub(input, start = 5)
tract_df$current_data <- tract_df[[input]]
NUM_VARIABLES <- tract_df %>%
select(starts_with(selected_val)) %>%
colnames() %>%
length()
NUM_VARIABLES <- NUM_VARIABLES - 1
max_val <- 1 - (1/(NUM_VARIABLES))
pal_option <- "RdYlBu"
# pal_option <- addalpha(pal_option, alpha = .5)
#pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
if (scale_bool){
pal <- colorNumeric(palette = pal_option, domain = c(0, max_val),
na.color = "#505050")
legend_label <- "Diversity Index Score"
}else {
pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
legend_label <- "Percentile of Diversity Index"
}
tract_df %>%
#filter(!(NAME %in% c("min_val", "max_val"))) %>%
#add_row(current_data = 0) %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(height = "100%",
width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
# popup = tract_df %>%
#             as_tibble() %>%
#             mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
#             select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val)) %>%
#             rename_with( ~ str_sub(.x, start = str_length(input) - 2), starts_with(selected_val)) %>%
#             rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
#             popupTable(feature.id = F,
#                        row.numbers = F),
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data),
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)) %>%
# addPolygons(
#   stroke = F,
#   smoothFactor = 0,
#   fillOpacity = 0.7,
#   color = ~ pal(current_data), group = 'current_data',
#   popup = popupGraph(p_all)
# ) %>%
# leafpop:::addPopupIframes(source = p_all, group = 'current_data') %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data %>% append(values = c(0, max_val)),
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
}
tract_df <- tract_df %>% st_as_sf()
selected_val <- str_sub(input, start = 5)
tract_df$current_data <- tract_df[[input]]
NUM_VARIABLES <- tract_df %>%
select(starts_with(selected_val)) %>%
colnames() %>%
length()
NUM_VARIABLES <- NUM_VARIABLES - 1
max_val <- 1 - (1/(NUM_VARIABLES))
pal_option <- "RdYlBu"
#pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
if (scale_bool){
pal <- colorNumeric(palette = pal_option, domain = c(0, max_val),
na.color = "#505050")
legend_label <- "Diversity Index Score"
}else {
pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
legend_label <- "Percentile of Diversity Index"
}
tract_df %>%
#filter(!(NAME %in% c("min_val", "max_val"))) %>%
#add_row(current_data = 0) %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(height = "100%",
width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
# popup = tract_df %>%
#             as_tibble() %>%
#             mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
#             select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val)) %>%
#             rename_with( ~ str_sub(.x, start = str_length(input) - 2), starts_with(selected_val)) %>%
#             rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
#             popupTable(feature.id = F,
#                        row.numbers = F),
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data),
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)) %>%
# addPolygons(
#   stroke = F,
#   smoothFactor = 0,
#   fillOpacity = 0.7,
#   color = ~ pal(current_data), group = 'current_data',
#   popup = popupGraph(p_all)
# ) %>%
# leafpop:::addPopupIframes(source = p_all, group = 'current_data') %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data %>% append(values = c(0, max_val)),
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total)) %>%
mutate_if(is.numeric,scales::percent)
# renaming columns per variable
if(str_contains(input, "hh")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Households")
} else if(str_contains(input, "educ")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 25+")
}else if(str_contains(input, "lang")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 5+")
} else {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons")
}
tract_df %>%
#filter(!(NAME %in% c("min_val", "max_val"))) %>%
#add_row(current_data = 0) %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(height = "100%",
width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
# popup = tract_df %>%
#             as_tibble() %>%
#             mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
#             select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val)) %>%
#             rename_with( ~ str_sub(.x, start = str_length(input) - 2), starts_with(selected_val)) %>%
#             rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
#             popupTable(feature.id = F,
#                        row.numbers = F),
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data),
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)) %>%
# addPolygons(
#   stroke = F,
#   smoothFactor = 0,
#   fillOpacity = 0.7,
#   color = ~ pal(current_data), group = 'current_data',
#   popup = popupGraph(p_all)
# ) %>%
# leafpop:::addPopupIframes(source = p_all, group = 'current_data') %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data %>% append(values = c(0, max_val)),
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
table_popup_fxn <- function(tract_df, input) {
# renamng columns
table_df <- tract_df %>% as_tibble() %>% mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val))
table_df <- table_df %>%
rename_with(.cols = 2, ~"Total") %>%
dplyr::mutate_at(vars(3:ncol(table_df)), list(share=~./Total)) %>%
select(`Census Tract`, ends_with("Total"), ends_with("share")) %>%
rename_with( ~ str_sub(.x, start = str_length(input) - 2), ends_with("share")) %>%
rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
mutate(Total = as.character(Total))
# mutate_if(is.numeric,scales::percent)
# renaming columns per variable
if(str_contains(input, "hh")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Households")
} else if(str_contains(input, "educ")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 25+")
}else if(str_contains(input, "lang")) {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons 5+")
} else {
table_df <- table_df %>% rename_with(.cols = 2, ~"Total Persons")
}
return(table_df)
}
{
tract_df <- tract_df %>% st_as_sf()
selected_val <- str_sub(input, start = 5)
tract_df$current_data <- tract_df[[input]]
NUM_VARIABLES <- tract_df %>%
select(starts_with(selected_val)) %>%
colnames() %>%
length()
NUM_VARIABLES <- NUM_VARIABLES - 1
max_val <- 1 - (1/(NUM_VARIABLES))
pal_option <- "RdYlBu"
# pal_option <- addalpha(pal_option, alpha = .5)
#pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
if (scale_bool){
pal <- colorNumeric(palette = pal_option, domain = c(0, max_val),
na.color = "#505050")
legend_label <- "Diversity Index Score"
}else {
pal <- colorQuantile(palette = pal_option, domain = tract_df$current_data, n = 5)
legend_label <- "Percentile of Diversity Index"
}
tract_df %>%
#filter(!(NAME %in% c("min_val", "max_val"))) %>%
#add_row(current_data = 0) %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet(height = "100%",
width = "100%") %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
# popup = tract_df %>%
#             as_tibble() %>%
#             mutate(`Census Tract` = str_sub(NAME, start = 14, end = -32)) %>%
#             select(`Census Tract`, contains('Total', ignore.case = F), starts_with(selected_val)) %>%
#             rename_with( ~ str_sub(.x, start = str_length(input) - 2), starts_with(selected_val)) %>%
#             rename_with( ~ gsub("_", " ", .x, fixed = TRUE)) %>%
#             popupTable(feature.id = F,
#                        row.numbers = F),
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data),
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)) %>%
# addPolygons(
#   stroke = F,
#   smoothFactor = 0,
#   fillOpacity = 0.7,
#   color = ~ pal(current_data), group = 'current_data',
#   popup = popupGraph(p_all)
# ) %>%
# leafpop:::addPopupIframes(source = p_all, group = 'current_data') %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data %>% append(values = c(0, max_val)),
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
}
tract_df %>%
mutate(current_data = ifelse(startsWith(NAME, "Census Tract 98"), NaN,current_data)) %>%
st_transform(crs = "+init=epsg:4326") %>%
leaflet() %>%
addTiles() %>%
addProviderTiles(provider = "CartoDB.Positron")  %>%
addPolygons(
stroke = F,
smoothFactor = 0,
fillOpacity = 0.7,
color = ~ pal(current_data), group = 'current_data',
popup = popupTable(table_popup_fxn(tract_df, input),
feature.id = F,row.numbers = F)
) %>%
addLegend("bottomright",
pal = pal,
values = ~ current_data,
title = legend_label,
opacity = 1,
na.label = 'Tracts with little or no population')
runApp('mapnew')
runApp('mapnew')
runApp('mapnew')
runApp('mapnew')
race_diversity_neighborhood <- readRDS("~/Documents/GitHub/Diversity-Map/output/race_diversity_neighborhood.RDS")
View(race_diversity_neighborhood)
pob_diversity_neighborhood <- readRDS("~/Documents/GitHub/Diversity-Map/output/pob_diversity_neighborhood.RDS")
View(pob_diversity_neighborhood)
setwd("~/Downloads/mapnew-3")
rsconnect::setAccountInfo(name='bpda-research',
token='0DDE1906FAD0B1E3F22E371886650437',
secret='BqfqoWOGdn0sZ1uYMC6pJDDL96yXu38d/epFZF0r')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='bpda-research', token='0DDE1906FAD0B1E3F22E371886650437', secret='BqfqoWOGdn0sZ1uYMC6pJDDL96yXu38d/epFZF0r')
shiny::runApp()
runApp()
#new_wd <- "C:/Users/camilleb/Box/Research/Active Projects/Interactive Diversity Map/mapnew-3"
new_wd <- getwd()
runApp()
runApp()
{
library(DT)
library(leaflet)
library(leafpop)
library(plotly)
library(RColorBrewer)
library(sf)
library(shiny)
library(shinythemes)
library(stringr)
library(tidycensus)
library(tidyverse)
library(viridis)
library(shinyjs)
library(shinydlplot)
library(sjmisc)
library(scales)
}
runApp()
runApp()
?tabsetPanel
