mutate(eng_not = 1 - (div_prop(`Speak only English`,Total)+
div_prop((Total - .[[2]]), Total)),
all = 1 - (div_prop(`Speak only English`,Total)+
div_prop(`Spanish:`,Total)+
div_prop(`French, Haitian, or Cajun:`,Total)+
div_prop(`German or other West Germanic languages:`,Total) +
div_prop(`Russian, Polish, or other Slavic languages:`,Total)+
div_prop(`Other Indo-European languages:`,Total) + div_prop(`Korean:`,Total)+
div_prop(`Chinese (incl. Mandarin, Cantonese):`,Total)+
div_prop(`Vietnamese:`,Total)+
div_prop(`Tagalog (incl. Filipino):`,Total)+
div_prop(`Other Asian and Pacific Island languages:`,Total)+
div_prop(`Arabic:`,Total)+
div_prop(`Other and unspecified languages:`,Total)))
language_div_vector <- lang_small %>%
mutate(eng_not = 1 - (div_prop(`Speak only English`,Total)+
div_prop((Total - [[2]]), Total)),
all = 1 - (div_prop(`Speak only English`,Total)+
div_prop(`Spanish:`,Total)+
div_prop(`French, Haitian, or Cajun:`,Total)+
div_prop(`German or other West Germanic languages:`,Total) +
div_prop(`Russian, Polish, or other Slavic languages:`,Total)+
div_prop(`Other Indo-European languages:`,Total) + div_prop(`Korean:`,Total)+
div_prop(`Chinese (incl. Mandarin, Cantonese):`,Total)+
div_prop(`Vietnamese:`,Total)+
div_prop(`Tagalog (incl. Filipino):`,Total)+
div_prop(`Other Asian and Pacific Island languages:`,Total)+
div_prop(`Arabic:`,Total)+
div_prop(`Other and unspecified languages:`,Total)))
language_div_vector <- lang_small %>%
mutate(eng_not = 1 - (div_prop(`Speak only English`,Total)+
div_prop((Total - .[[2]]), Total)),
all = 1 - (div_prop(`Speak only English`,Total)+
div_prop(`Spanish:`,Total)+
div_prop(`French, Haitian, or Cajun:`,Total)+
div_prop(`German or other West Germanic languages:`,Total) +
div_prop(`Russian, Polish, or other Slavic languages:`,Total)+
div_prop(`Other Indo-European languages:`,Total) + div_prop(`Korean:`,Total)+
div_prop(`Chinese (incl. Mandarin, Cantonese):`,Total)+
div_prop(`Vietnamese:`,Total)+
div_prop(`Tagalog (incl. Filipino):`,Total)+
div_prop(`Other Asian and Pacific Island languages:`,Total)+
div_prop(`Arabic:`,Total)+
div_prop(`Other and unspecified languages:`,Total)))
View(lang_small)
language_div_vector <- lang_small %>%
mutate(eng_not = 1 - (div_prop(`Speak only English`,Total)+
div_prop((Total - .[[4]]), Total)),
all = 1 - (div_prop(`Speak only English`,Total)+
div_prop(`Spanish:`,Total)+
div_prop(`French, Haitian, or Cajun:`,Total)+
div_prop(`German or other West Germanic languages:`,Total) +
div_prop(`Russian, Polish, or other Slavic languages:`,Total)+
div_prop(`Other Indo-European languages:`,Total) + div_prop(`Korean:`,Total)+
div_prop(`Chinese (incl. Mandarin, Cantonese):`,Total)+
div_prop(`Vietnamese:`,Total)+
div_prop(`Tagalog (incl. Filipino):`,Total)+
div_prop(`Other Asian and Pacific Island languages:`,Total)+
div_prop(`Arabic:`,Total)+
div_prop(`Other and unspecified languages:`,Total)))
language_div_vector <- lang_small %>%
mutate(eng_not = 1 - (div_prop(.[[4]],Total)+
div_prop((Total - .[[4]]), Total)),
all = 1 - (div_prop(`Speak only English`,Total)+
div_prop(`Spanish:`,Total)+
div_prop(`French, Haitian, or Cajun:`,Total)+
div_prop(`German or other West Germanic languages:`,Total) +
div_prop(`Russian, Polish, or other Slavic languages:`,Total)+
div_prop(`Other Indo-European languages:`,Total) + div_prop(`Korean:`,Total)+
div_prop(`Chinese (incl. Mandarin, Cantonese):`,Total)+
div_prop(`Vietnamese:`,Total)+
div_prop(`Tagalog (incl. Filipino):`,Total)+
div_prop(`Other Asian and Pacific Island languages:`,Total)+
div_prop(`Arabic:`,Total)+
div_prop(`Other and unspecified languages:`,Total)))
View(language_div_vector)
View(language_div)
View(lang_small)
View(vars)
View(dat)
install.packages("Plotly")
install.packages("plotly")
install.packages("Plotly")
install.packages("Plotly")
install.package("Plotly")
library(plotly)
install.packages("plotly")
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("plotly")
tooltip_func <- function(df, col_string, tract_string){
#test_filter <- "all"
#test_filter_tract <- "Census Tract 604, Suffolk County, Massachusetts"
selected_columns <- df %>%
as_tibble() %>%
filter(NAME == tract_string) %>%
select(starts_with(col_string))
selected_columns_names <- selected_columns %>%
`colnames<-`(str_sub(colnames(selected_columns), start = str_count(col_string) + 2))
s <- capture.output(print(`colnames<-`(x = as.data.frame(t(selected_columns_names)), value = tract_string)))
s <- paste(s, collapse = "<br>")
s
}
shiny::runApp('C:/Users/michaelch/Downloads/diversity_map/diversity_map')
runApp('C:/Users/michaelch/Downloads/diversity_map/diversity_map')
tooltip_func(lang_div_tract, "all", "Census Tract 604, Suffolk County, Massachusetts")
VARS <- tidycensus::load_variables(dataset = 'acs5', year = 2020, cache = T)
div_prop <- function(var, total_pop) {
x <- (var/total_pop)^2
return(x)
}
div_calc_lang <- function(census_language_pull){
df_groups <- census_language_pull %>%
mutate(eng_not_Speaks_only_English =`Speak only English`,
eng_not_Other = Total - `Speak only English`,
all_Speaks_only_English = (`Speak only English`),
all_Spanish = (`Spanish:`),
all_French_Haitian_or_Cajun = (`French, Haitian, or Cajun:`),
all_German = (`German or other West Germanic languages:`),
all_Russian_Polish_or_other_Slavic  =  (`Russian, Polish, or other Slavic languages:`),
all_Other_Indo_European = (`Other Indo-European languages:`),
all_Korean = (`Korean:`),
all_Chinese =  (`Chinese (incl. Mandarin, Cantonese):`),
all_Vietnamese = (`Vietnamese:`),
all_Tagalog = (`Tagalog (incl. Filipino):`),
all_Other_Asian_and_Pacific_Island = (`Other Asian and Pacific Island languages:`),
all_Arabic = (`Arabic:`),
all_Other_Unspecified = (`Other and unspecified languages:`),
eng_eur_asian_other_Speaks_only_English = (`Speak only English`),
eng_eur_asian_other_European = (`Spanish:`+
`French, Haitian, or Cajun:`+
`German or other West Germanic languages:`+
`Russian, Polish, or other Slavic languages:`+
`Other Indo-European languages:`),
eng_eur_asian_other_Asian = (`Korean:` +
`Chinese (incl. Mandarin, Cantonese):` +
`Vietnamese:` +
`Tagalog (incl. Filipino):` +
`Other Asian and Pacific Island languages:`),
eng_eur_asian_other_Other = (`Arabic:` +
`Other and unspecified languages:`),
eng_span_other_Speaks_only_English = (`Speak only English`),
eng_span_other_Spanish= (`Spanish:`),
eng_span_other_Other =(`French, Haitian, or Cajun:`+
`German or other West Germanic languages:`+
`Russian, Polish, or other Slavic languages:`+
`Other Indo-European languages:`+
`Korean:` +
`Chinese (incl. Mandarin, Cantonese):` +
`Vietnamese:` +
`Tagalog (incl. Filipino):` +
`Other Asian and Pacific Island languages:`+
`Arabic:` +
`Other and unspecified languages:`),
eng_span_french_othereur_chin_viet_other_Speaks_only_English= (`Speak only English`),
eng_span_french_othereur_chin_viet_other_Spanish=(`Spanish:`),
eng_span_french_othereur_chin_viet_other_French_Haitian_or_Cajun=(`French, Haitian, or Cajun:`),
eng_span_french_othereur_chin_viet_other_Other_Indo_European=(`Other Indo-European languages:`),
eng_span_french_othereur_chin_viet_other_Chinese=(`Chinese (incl. Mandarin, Cantonese):`),
eng_span_french_othereur_chin_viet_other_Vietnamese=(`Vietnamese:`),
eng_span_french_othereur_chin_viet_other_Other=(`German or other West Germanic languages:` +
`Russian, Polish, or other Slavic languages:`+
`Korean:` +
`Tagalog (incl. Filipino):` +
`Other Asian and Pacific Island languages:` +
`Arabic:` +
`Other and unspecified languages:`))
df_values <- df_groups %>%
mutate(val_eng_not = 1 - (div_prop(eng_not_Speaks_only_English,Total)+
div_prop(eng_not_Other, Total)),
val_all =  1 -  (div_prop(all_Speaks_only_English, Total) +
div_prop(all_Spanish, Total) +
div_prop(all_French_Haitian_or_Cajun, Total) +
div_prop(all_German, Total) +
div_prop(all_Russian_Polish_or_other_Slavic, Total) +
div_prop(all_Korean, Total) +
div_prop(all_Chinese, Total) +
div_prop(all_Vietnamese, Total) +
div_prop(all_Tagalog, Total) +
div_prop(all_Other_Asian_and_Pacific_Island, Total) +
div_prop(all_Arabic, Total) +
div_prop(all_Other_Unspecified, Total)),
val_eng_eur_asian_other = 1 - (div_prop( eng_eur_asian_other_Speaks_only_English, Total) +
div_prop( eng_eur_asian_other_European, Total) +
div_prop( eng_eur_asian_other_Asian,Total) +
div_prop( eng_eur_asian_other_Other,Total)),
val_eng_span_other= 1 - (div_prop(eng_span_other_Speaks_only_English,Total) +
div_prop(eng_span_other_Spanish,Total) +
div_prop(eng_span_other_Other,Total)),
val_eng_span_french_othereur_chin_viet_other= 1 - (div_prop(eng_span_french_othereur_chin_viet_other_Speaks_only_English,Total) +
div_prop(eng_span_french_othereur_chin_viet_other_Spanish,Total) +
div_prop(eng_span_french_othereur_chin_viet_other_French_Haitian_or_Cajun,Total) +
div_prop(eng_span_french_othereur_chin_viet_other_Other_Indo_European,Total) +
div_prop(eng_span_french_othereur_chin_viet_other_Chinese, Total) +
div_prop(eng_span_french_othereur_chin_viet_other_Vietnamese, Total) +
div_prop(eng_span_french_othereur_chin_viet_other_Other, Total)))
}
TRACT_TO_NEIGHBORHOOD <- readxl::read_xlsx("geo20_tract_block group comparison.xlsx")
setwd("C:/Users/michaelch/Downloads/diversity_map/diversity_map")
lang_cities_pull <- read_csv("C16001_Cities.csv")
#selecting the correct variable and removing the extra fields
lang_vars <- VARS %>%
filter(concept == "LANGUAGE SPOKEN AT HOME FOR THE POPULATION 5 YEARS AND OVER") %>%
filter(str_detect(label, '\"', negate = T)) %>%
mutate(nameE = paste0(name, "E"))
#the variable codes to use as input for get_acs
lang_names <- lang_vars$name
#Call to census api to get relevant variables
#language_at_home_acs5
lang_pull_raw <- tidycensus::get_acs(geography = "tract",
variable = lang_names,
output = "wide",
state = "MA",
county = "Suffolk",
geometry = TRUE,
year = 2020,
cache_table = T,
show_call = TRUE) %>%
filter(!(str_detect(NAME,"Census Tract 99")|str_detect(NAME,"Census Tract 18")
|str_detect(NAME,"Census Tract 17")|str_detect(NAME,"Census Tract 16")
|str_detect(NAME,"Census Tract 9812.01")|str_detect(NAME,"Census Tract 9801.01")))
#Removing margin of error columns
lang_pull_small <- lang_pull_raw %>%
select(!ends_with("M"))
##Formatting data
dat <- lang_vars %>% select(nameE,label) %>%
mutate(label_small = str_sub(label, start = (str_locate(label, 'Estimate!!Total:!!')[,2] + 1))) %>%
select(-label)
dat$label_small[1]<- "Total"
lang_pull_small <- lang_pull_small %>%
rename_with(~deframe(dat)[.x], .cols = dat$nameE) %>%
select(GEOID, NAME, any_of(dat$label_small), geometry)
##Doing the diversity calculations
lang_div_tract <- div_calc_lang(lang_pull_small)
lang_div_cities <- div_calc_lang(lang_cities_pull)
##Grouping by neighborhood calculations
lang_div_tract_by_neigh <- lang_div_tract %>%
left_join(TRACT_TO_NEIGHBORHOOD, by = c('NAME'='tract20')) %>%
filter((!is.na(tract20_nbhd))| Total==0)
neigh_sum <- lang_div_tract_by_neigh %>%
filter(tract20_nbhd != "_Census Tract 9901.01, Suffolk County, Massachusetts") %>%
as_tibble() %>%
group_by(tract20_nbhd) %>%
summarise(Total=sum(Total),
`Speak only English`=sum(`Speak only English`),
`Spanish:`=sum(`Spanish:`),
`French, Haitian, or Cajun:`=sum(`French, Haitian, or Cajun:`),
`German or other West Germanic languages:`=sum(`German or other West Germanic languages:`),
`Russian, Polish, or other Slavic languages:`=sum(`Russian, Polish, or other Slavic languages:`),
`Other Indo-European languages:`=sum(`Other Indo-European languages:`),
`Korean:`=sum(`Korean:`),
`Chinese (incl. Mandarin, Cantonese):`=sum(`Chinese (incl. Mandarin, Cantonese):`),
`Vietnamese:`=sum(`Vietnamese:`),
`Tagalog (incl. Filipino):`=sum(`Tagalog (incl. Filipino):`),
`Other Asian and Pacific Island languages:`=sum(`Other Asian and Pacific Island languages:`),
`Arabic:`=sum(`Arabic:`),
`Other and unspecified languages:`=sum(`Other and unspecified languages:`))
TRACT_TO_NEIGHBORHOOD <- readxl::read_xlsx("geo20_tract_block group comparison.xlsx")
lang_cities_pull <- read_csv("C16001_Cities.csv")
neigh_sum <- lang_div_tract_by_neigh %>%
filter(tract20_nbhd != "_Census Tract 9901.01, Suffolk County, Massachusetts") %>%
as_tibble() %>%
group_by(tract20_nbhd) %>%
summarise(Total=sum(Total),
`Speak only English`=sum(`Speak only English`),
`Spanish:`=sum(`Spanish:`),
`French, Haitian, or Cajun:`=sum(`French, Haitian, or Cajun:`),
`German or other West Germanic languages:`=sum(`German or other West Germanic languages:`),
`Russian, Polish, or other Slavic languages:`=sum(`Russian, Polish, or other Slavic languages:`),
`Other Indo-European languages:`=sum(`Other Indo-European languages:`),
`Korean:`=sum(`Korean:`),
`Chinese (incl. Mandarin, Cantonese):`=sum(`Chinese (incl. Mandarin, Cantonese):`),
`Vietnamese:`=sum(`Vietnamese:`),
`Tagalog (incl. Filipino):`=sum(`Tagalog (incl. Filipino):`),
`Other Asian and Pacific Island languages:`=sum(`Other Asian and Pacific Island languages:`),
`Arabic:`=sum(`Arabic:`),
`Other and unspecified languages:`=sum(`Other and unspecified languages:`))
##Grouping by neighborhood calculations
lang_div_tract_by_neigh <- lang_div_tract %>%
left_join(TRACT_TO_NEIGHBORHOOD, by = c('NAME'='tract20')) %>%
filter((!is.na(tract20_nbhd))| Total==0)
neigh_sum <- lang_div_tract_by_neigh %>%
filter(tract20_nbhd != "_Census Tract 9901.01, Suffolk County, Massachusetts") %>%
as_tibble() %>%
group_by(tract20_nbhd) %>%
summarise(Total=sum(Total),
`Speak only English`=sum(`Speak only English`),
`Spanish:`=sum(`Spanish:`),
`French, Haitian, or Cajun:`=sum(`French, Haitian, or Cajun:`),
`German or other West Germanic languages:`=sum(`German or other West Germanic languages:`),
`Russian, Polish, or other Slavic languages:`=sum(`Russian, Polish, or other Slavic languages:`),
`Other Indo-European languages:`=sum(`Other Indo-European languages:`),
`Korean:`=sum(`Korean:`),
`Chinese (incl. Mandarin, Cantonese):`=sum(`Chinese (incl. Mandarin, Cantonese):`),
`Vietnamese:`=sum(`Vietnamese:`),
`Tagalog (incl. Filipino):`=sum(`Tagalog (incl. Filipino):`),
`Other Asian and Pacific Island languages:`=sum(`Other Asian and Pacific Island languages:`),
`Arabic:`=sum(`Arabic:`),
`Other and unspecified languages:`=sum(`Other and unspecified languages:`))
city_sum <- lang_div_tract_by_neigh %>%
as_tibble() %>%
summarise(Total=sum(Total),
`Speak only English`=sum(`Speak only English`),
`Spanish:`=sum(`Spanish:`),
`French, Haitian, or Cajun:`=sum(`French, Haitian, or Cajun:`),
`German or other West Germanic languages:`=sum(`German or other West Germanic languages:`),
`Russian, Polish, or other Slavic languages:`=sum(`Russian, Polish, or other Slavic languages:`),
`Other Indo-European languages:`=sum(`Other Indo-European languages:`),
`Korean:`=sum(`Korean:`),
`Chinese (incl. Mandarin, Cantonese):`=sum(`Chinese (incl. Mandarin, Cantonese):`),
`Vietnamese:`=sum(`Vietnamese:`),
`Tagalog (incl. Filipino):`=sum(`Tagalog (incl. Filipino):`),
`Other Asian and Pacific Island languages:`=sum(`Other Asian and Pacific Island languages:`),
`Arabic:`=sum(`Arabic:`),
`Other and unspecified languages:`=sum(`Other and unspecified languages:`)) %>%
mutate(tract20_nbhd="Citywide")
neigh_city_sum <- city_sum %>%
rbind(neigh_sum)
###Neighborhood diversity calculations
lang_div_neigh <- div_calc_lang(neigh_city_sum)
tooltip_func <- function(df, col_string, tract_string){
#test_filter <- "all"
#test_filter_tract <- "Census Tract 604, Suffolk County, Massachusetts"
selected_columns <- df %>%
as_tibble() %>%
filter(NAME == tract_string) %>%
select(starts_with(col_string))
selected_columns_names <- selected_columns %>%
`colnames<-`(str_sub(colnames(selected_columns), start = str_count(col_string) + 2))
s <- capture.output(print(`colnames<-`(x = as.data.frame(t(selected_columns_names)), value = tract_string)))
s <- paste(s, collapse = "<br>")
s
}
tooltip_func(lang_div_tract, "all", "Census Tract 604, Suffolk County, Massachusetts")
s <- tooltip_func(lang_div_tract, "all", "Census Tract 604, Suffolk County, Massachusetts")
runApp()
runApp()
View(lang_div_tract)
lang_div_tract$NAME
runApp()
runApp()
runApp()
View(lang_div_tract)
runApp()
s <- tooltip_func(lang_div_tract, "all", "Census Tract 604, Suffolk County, Massachusetts")
lang_div_tract <- read_rds("Language_diversity_tract.RDS") %>%
mutate(current_data = val_eng_not)
View(lang_div_tract)
lang_div_tract$NAME[1]
s <- tooltip_func(lang_div_tract, "all", lang_div_tract$NAME[1])
runApp()
runApp()
runApp()
lang_div_tract$NAME[1]
lang_div_tract %>%
mutate(tooltip = tooltip_func(tract_string = NAME, col_string = selected_val))
lang_div_tract %>%
mutate(tooltip = tooltip_func(tract_string = NAME, col_string = selected_val))
lang_div_tract <- lang_div_tract %>%
mutate(tooltip = tooltip_func(df = lang_div_tract, tract_string = NAME, col_string = selected_val))
tooltip_func <- function(col_string, tract_string){
#test_filter <- "all"
#test_filter_tract <- "Census Tract 604, Suffolk County, Massachusetts"
selected_columns <- read_rds("Language_diversity_tract.RDS") %>%
as_tibble() %>%
filter(NAME == tract_string) %>%
select(starts_with(col_string))
selected_columns_names <- selected_columns %>%
`colnames<-`(str_sub(colnames(selected_columns), start = str_count(col_string) + 2))
s <- capture.output(print(`colnames<-`(x = as.data.frame(t(selected_columns_names)), value = tract_string)))
s <- paste(s, collapse = "<br>")
s
}
lang_div_tract2 <- lang_div_tract %>%
mutate(tooltip = tooltip_func(df = lang_div_tract, tract_string = NAME, col_string = selected_val))
lang_div_tract2 <- lang_div_tract %>%
mutate(tooltip = tooltip_func(tract_string = NAME, col_string = selected_val))
lang_div_tract2 <- lang_div_tract %>%
mutate(tooltip = tooltip_func(tract_string = NAME, col_string = "all"))
View(lang_div_tract2)
lang_div_tract2$tooltip
runApp()
lang_div_tract2$tooltip[1]
library(ggplot2)
library(lubridate)
# create dummy dataset
subscribers <- data.frame(id = seq(1:10),
start = sample(seq(as.Date('2016/01/01'), as.Date('2016/06/01'), by="day"), 10),
end   = sample(seq(as.Date('2017/01/01'), as.Date('2017/06/01'), by="day"), 10))
# creates a row for each day per user - OK for small datasets, but not scalable
date_map <- Map(seq, subscribers$start, subscribers$end, by = "day")
date_rows <- data.frame(
org     = rep.int(subscribers$id,  vapply(date_map, length, 1L)),
date    = do.call(c, date_map))
View(date_rows)
df <- subscribers %>%
gather(key, value, start, end) %>%
mutate(key = ifelse(key == "start",1,-1)) %>%
arrange(value)
df$cum <- cumsum(df$key)
ggplot(data = df,
aes(x = value, y = cum)) +
geom_step()
ggplot(data = df,
aes(x = value, y = cum)) +
geom_step()
View(subscribers)
salesforce <- read.csv(file.choose())
View(salesforce)
salesforce <- read.csv(file.choose())
View(salesforce)
View(subscribers)
df <- salesforce %>%
gather(key, value, First.Building.Permit, COO.Permit.Date) %>%
mutate(key = ifelse(key == "start",1,-1)) %>%
arrange(value)
View(df)
df$cum <- cumsum(df$key)
ggplot(data = df,
aes(x = value, y = cum)) +
geom_step()
View(subscribers)
View(subscribers)
df <- salesforce %>%
gather(key, value, First.Building.Permit, COO.Permit.Date) %>%
mutate(key = ifelse(key == "First.Building.Permit",1,-1)) %>%
arrange(value)
df$cum <- cumsum(df$key)
ggplot(data = df,
aes(x = value, y = cum)) +
geom_step()
View(df)
df <- salesforce %>%
select(-Gross.Square.Footage) %>%
gather(key, value, First.Building.Permit, COO.Permit.Date) %>%
mutate(key = ifelse(key == "First.Building.Permit",1,-1)) %>%
arrange(value)
df$cum <- cumsum(df$key)
ggplot(data = df,
aes(x = value, y = cum)) +
geom_step()
# creates a row for each day per user - OK for small datasets, but not scalable
date_map <- Map(seq, salesforce$First.Building.Permit, salesforce$COO.Permit.Date, by = "month")
date_rows <- data.frame(
org     = rep.int(salesforce$Project..Name,  vapply(date_map, length, 1L)),
date    = do.call(c, date_map))
salesforce
View(salesforce)
salesforce %>%
filter(!is.na(First.Building.Permit)) %>%
mutate(COO.Permit.Date = ifelse(is.na(COO.Permit.Date), today(),COO.Permit.Date))
salesforce2 <- salesforce %>%
filter(!is.na(First.Building.Permit)) %>%
mutate(COO.Permit.Date = ifelse(is.na(COO.Permit.Date), today(),COO.Permit.Date))
View(salesforce2)
salesforce[2]
salesforce$First.Building.Permit[2]
salesforce$First.Building.Permit[2] %>% typeof()
salesforce$First.Building.Permit[1] %>% typeof()
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
mutate(COO.Permit.Date = ifelse(COO.Permit.Date =="", today(),COO.Permit.Date))
View(salesforce2)
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
mutate(COO.Permit.Date = ifelse(COO.Permit.Date =="", today(), as_date(COO.Permit.Date)))
?as_date
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
mutate(COO.Permit.Date = ifelse(COO.Permit.Date =="", today(), as.Date(COO.Permit.Date)))
View(salesforce2)
sample_date <- salesforce$First.Building.Permit[1]
as_date(sample_date)
as.Date(sample_date, "%m%d%y")
as.Date(sample_date, "%M%D%Y")
as.Date(sample_date, "%m%d%Y")
as.Date()
?as.Date()
as.Date(sample_date, "%m/%d/%Y")
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
mutate(COO.Permit.Date = ifelse(COO.Permit.Date =="", today(), as.Date(COO.Permit.Date, "%m/%d/%Y")))
View(salesforce2)
?today()
today()
today() %>% typeof()
Sys.Date()
Sys.Date() %>% typeof()
typeof(today())
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
mutate(COO.Permit.Date.date = ifelse(COO.Permit.Date =="", today(), as.Date(COO.Permit.Date, "%m/%d/%Y")))
View(salesforce2)
salesforce2$COO.Permit.Date.date %>% as.Date()
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "")
View(salesforce2)
# creates a row for each day per user - OK for small datasets, but not scalable
date_map <- Map(seq, salesforce$First.Building.Permit, salesforce$COO.Permit.Date, by = "month")
salesforce2 <- salesforce %>%
filter(First.Building.Permit != "") %>%
select(-Gross.Square.Footage)
replace(salesforce2$COO.Permit.Date, "", today())
salesforce2$COO.Permit.Date<- replace(salesforce2$COO.Permit.Date, "", today())
salesforce2 %>%
replace("", today())
View(salesforce2)
select(-Gross.Square.Footage) %>%
)
salesforce2 <- salesforce %>%
remotes::install_github("walkerke/tidycensus")
?str_detect
